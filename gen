#!/usr/bin/env bash

# Generate: A command-line script file generation tool written in bash 3.2+.
# https://github.com/membersincewayback/gen
#
# Copyright (C) 2022 Zac Piatt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

version="Generate (gen) version: 1.5.5 - December 18, 2022"

which_template() {
    if [[ -n "${template:-}" ]]; then
        format="templates"

gen_templates() {
cat <<EOF
${template}
EOF
}

    else

gen_py() {
cat <<EOF
#!/usr/bin/env python
def main():

if __name__ == '__main__':
    main()
EOF
}

gen_pl() {
cat <<EOF
#!/usr/bin/env perl
use strict;
use warnings;
EOF
}

gen_c() {
cat <<EOF
#include <stdio.h>
#include <stdlib.h>

int main()
{

    return 0;
}
EOF
}

gen_sh() {
cat <<EOF
#!/usr/bin/env ${ext}

EOF
}

gen_html() {
cat <<EOF
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>HTML 5 Boilerplate</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
        <script src="index.js"></script>
  </body>
</html>
EOF
}

gen_jsx() {
    basename="${filename##*/}"
cat <<EOF
import React from 'react';

function ${basename%.*}() {
  return (
    <>
    </>
  );
}

export default ${basename%.*};
EOF
}
    fi
}

usage() {
cat <<EOF
Usage: gen [OPTION]... [FILE]...
Generate FILE, auto-input typical text, and auto-launch default editor.

  -x,   make file executable regardless of default
  -q,   quiet auto-input of script template
  -s,   suppress auto-launch of editor
  -e,   select editor ( gen -e nano test.txt )
  -d,   force default template despite available custom
  -m    generate multiple files. ( gen -m [0-9] test.txt )
  -v,   display version number and exit
  -h,   display this help and exit

Full documentation <https://github.com/membersincewayback/gen>
${version}
EOF
exit 0
}

which_ed() {
    while IFS= read -r file; do
        case "$file" in
            */emacs) EDITOR="/usr/bin/emacs"; return ;;
            */mc) EDITOR="/usr/bin/mc"; return ;;
            */micro) EDITOR="/usr/bin/micro"; return ;;
            */nano) EDITOR="/usr/bin/nano"; return ;;
            */ne) EDITOR="/usr/bin/ne"; return ;;
            */nvim) EDITOR="/usr/bin/nvim"; return ;;
            */vim) EDITOR="/usr/bin/vim"; return ;;
            */vi) EDITOR="/usr/bin/vi"; return ;;
        esac
    done < <(find /usr/bin)
}

create_one() {
    if [[ -e "$filename" ]]; then
        printf "%s already exists.\n" "$filename"; exit 1
    else
        if ! touch "$filename" 2> /dev/null; then
            printf "gen: cannot generate '%s': Permission denied\n" "$filename"; exit 1
        fi
    fi
}

create_multi() {
    for ((i=1; i <= multi; i++)); do
        if [[ -n "${ext:-}" ]]; then
            new="${filename%.*}""${i}"."${filename##*.}"
        else
            new="$filename""$i"
        fi
        if [[ -e "$new" ]]; then
            printf "%s already exists.\n" "$new"; exit 1
        else
            if ! touch "$new" 2> /dev/null; then
                printf "gen: cannot generate '%s': Permission denied\n" "$filename"; exit 1
            fi
        fi
        [[ -n "${exe:-}" ]] && chmod u+x "$new"
        [[ -z "${quiet:-}" ]] && gen_"${format:-sh}" >> "$new"
    done
    exit 0
}

check_ext() {
    case "${ext:-}" in
        awk) exe=true ;;
        c) format="c" ;;
        jsx) format="jsx" ;;
        html|htm) format="html" ;;
        js) exe=true; ext="node" ;;
        py) exe=true; format="py" ;;
        pl) exe=true; format="pl" ;;
        sh|bash) exe=true; ext="bash" ;;
        *sh) exe=true ;;
        *) [[ -z "${template:-}" ]] && quiet=true ;;
    esac
}

get_template() {
    [[ -f "$HOME/.gen/templates/template.$ext" ]] && \
        template="$(< "$HOME/.gen/templates/template.$ext")"
}

get_args() {
    while getopts ':hxqdse:vm:' option; do
        case "$option" in
            h) usage ;;
            x) exe=true ;;
            q) quiet=true ;;
            d) default=true ;;
            s) suppress=true ;;
            e) EDITOR="$OPTARG" ;;
            v) printf "%s\n" "$version"; exit 0 ;;
            m)
                if [[ "$OPTARG" =~ ^[0-9]*$ ]]; then
                    multi="$OPTARG"; suppress=true
                else
                    printf "Provide a positive integer to generate multiple files.\n"
                    printf "Try 'gen -h' for more information.\n"; exit 1
                fi
            ;;

            ?)
                printf "gen: invalid option -- '%s'\n" "$OPTARG"
                printf "Try 'gen -h' for more information.\n"; exit 1
            ;;
        esac
    done
    shift "$((OPTIND -1))"
    if [[ -n "${1:-}" ]]; then
        filename="$1"
    else
        printf "Must provide filename to generate.\n"
        printf "Try 'gen -h' for more information.\n"; exit 1
    fi
}

main() {
    get_args "$@"
    [[ "${filename}" == *.* ]] && ext="${filename##*.}"
    [[ -z "${default:-}" && -n "${ext:-}" ]] && get_template
    check_ext
    [[ -z "${quiet:-}" ]] && which_template
    [[ -n "${multi:-}" ]] && create_multi
    create_one
    [[ -n "${exe:-}" ]] && chmod u+x "$filename"
    [[ -z "${quiet:-}" ]] && gen_"${format:-sh}" >> "$filename"
    [[ -z ${EDITOR:-} ]] && which_ed
    [[ -z "${suppress:-}" ]] && "$EDITOR" "$filename"
}

main "$@"
