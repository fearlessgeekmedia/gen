#!/usr/bin/env bash

# Generate: A command-line script file generation tool written in bash 3.2+.
# https://github.com/zpiatt/gen
#
# Copyright (C) 2022 Zac Piatt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

readonly version="Generate (gen) version: 2.0.3 - August 3, 2023"

usage() {
    printf "Usage: gen [OPTION]... [FILE]...\n"
    printf "Generate FILE, input script template, and launch default editor.\n\n"
    printf "  -c,   change file permissions with octal mode bits ( gen -c 754 example.sh )\n"
    printf "  -d,   use default template despite available custom template\n"
    printf "  -e,   manually select editor ( gen -e nano example.py )\n"
    printf "  -f,   overwrite existing file contents, never prompt\n"
    printf "  -h,   display help and exit\n"
    printf "  -q,   quiet automatic input of script template\n"
    printf "  -s,   suppress launch of editor\n"
    printf "  -v,   display version number and exit\n\n"
    printf "Full documentation <https://github.com/zpiatt/gen>\n"
    printf "or available locally via: info generate\n"
    exit 0
}

which_ed() {
    local editors ed
    editors=( "${VISUAL:-}" "${EDITOR:-}" nano vi emacs ed )
    
    for ed in "${editors[@]}"; do
        if [[ -n "$ed" ]]; then
            editor="$(command -v "$ed" 2> /dev/null)" && return 0
        fi
    done
    
    printf "No editor found in PATH.\n" >&2
    printf "Try 'gen -h' for more information.\n" >&2; exit 127
}

gen_template() {
    if [[ -n "${template:-}" ]]; then
        local basename="${file##*/}"
        printf "%s\n" "${template//basename/${basename%.*}}"
    else
        printf "#!/usr/bin/env %s\n" "$ext"
    fi
}

create_file() {
    if [[ -f "$file" && -z "${force:-}" ]]; then
        read -erp "gen: overwrite '${file}'? " overwrite
        [[ ! "${overwrite,,}" =~ ^y(es)?$ ]] && exit 0
    fi
    
    if [[ -f "$file" ]]; then
        chmod "${custom_mode:-${mode:-u+rw}}" "$file" || exit 126
        (:>"$file") &> /dev/null || { printf "gen: %s: Permission denied\n" "$file" >&2; exit 126; }
    else
        (:>"$file") &> /dev/null || { printf "gen: %s: Permission denied\n" "$file" >&2; exit 126; }
        chmod "${custom_mode:-${mode:-u+rw}}" "$file" || { rm -f "$file"; exit 126; }
    fi
}

check_ext() {
    case "${ext:-}" in
        py) mode="u+rwx" ;;
        awk) mode="u+rwx" ;;
        js) mode="u+rwx"; ext="node" ;;
        pl) mode="u+rwx"; ext="perl" ;;
        sh|bash) mode="u+rwx"; ext="bash" ;;
        *sh) mode="u+rwx" ;;
        *) [[ -z "$template" ]] && quiet=true ;;
    esac
}

get_template() {
    [[ -f "${HOME}/.gen/templates/template.${ext}" ]] && \
        template="$(< "${HOME}/.gen/templates/template.${ext}")"
}

get_args() {
    while getopts ':hqfdsvc:e:' option; do
        case "$option" in
            h) usage ;;
            q) quiet=true ;;
            f) force=true ;;
            d) default=true ;;
            s) suppress=true ;;
            v) printf "%s\n" "$version"; exit 0 ;;
            c) 
                if [[ "$OPTARG" =~ [0-7]{3} ]]; then
                    custom_mode="$OPTARG" 
                else
                    printf "gen: invalid mode: %s\n" "$OPTARG" >&2
                    printf "Try 'gen -h' for more information.\n" >&2; exit 2
                fi
            ;;

            e)
                if command -v "$OPTARG" &> /dev/null; then
                    editor="$OPTARG"
                else
                    printf "gen: %s: not found\n" "$OPTARG" >&2
                    printf "Try 'gen -h' for more information.\n" >&2; exit 127
                fi
            ;;

            ?)
                printf "gen: invalid option -- '%s'\n" "$OPTARG" >&2
                printf "Try 'gen -h' for more information.\n" >&2; exit 2
            ;;
        esac
    done
    shift "$(( OPTIND -1 ))"
    
    if [[ -z "${1:-}" ]]; then
        printf "gen: Must provide filename.\n" >&2
        printf "Try 'gen -h' for more information.\n" >&2; exit 2
    elif [[ -d "$1" ]]; then
        printf "gen: cannot generate '%s': Is a directory\n" "$1" >&2; exit 2
    else
        file="$1"
    fi
}

main() {
    get_args "$@"
    [[ "$file" == *.* ]] && ext="${file##*.}"
    [[ -z "${default:-}" && -n "${ext:-}" ]] && get_template
    check_ext
    create_file
    [[ -z "${quiet:-}" ]] && gen_template > "$file"
    [[ -z "${suppress:-}" && -z "${editor:-}" ]] && which_ed
    [[ -z "${suppress:-}" ]] && "$editor" "$file"
    return 0
}

main "$@"
