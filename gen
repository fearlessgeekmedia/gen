#!/usr/bin/env bash

# Generate: A command-line script file generation tool written in bash 3.2+.
# https://github.com/zpiatt/gen
#
# Copyright (C) 2022 Zac Piatt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

readonly version="Generate (gen) version: 1.8.6 - July 25, 2023"

usage() {
	cat <<-EOF
	Usage: gen [OPTION]... [FILE]...
	Generate FILE, input script template, and launch default editor.

	  -c,   customize file permissions ( gen -c 754 example.sh )
	  -d,   use default template despite available custom template
	  -e,   manually select editor ( gen -e nano example.py )
	  -f,	overwrite existing file contents, never prompt
	  -h,   display help and exit
	  -q,   quiet automatic input of script template
	  -s,   suppress launch of editor
	  -v,   display version number and exit

	Full documentation <https://github.com/zpiatt/gen>
	or available locally via: info generate
	EOF
	exit 0
}

which_ed() {
	local editors=( "${VISUAL:-}" "${EDITOR:-}" nano vi emacs ed )
	for ed in "${editors[@]}"; do
		editor="$(command -v "$ed" 2> /dev/null)" && return 0
	done
	printf "No editor found in PATH.\n" >&2
	printf "Try 'gen -h' for more information.\n" >&2; exit 127
}

gen_template() {
	case "${format:-}" in
		custom_template) printf "%s\n" "${custom_template}" ;;
		py)
			cat <<-EOF
			#!/usr/bin/env python
			def main():

			if __name__ == '__main__':
			    main()
			EOF
		;;

		c)
			cat <<-EOF
			#include <stdio.h>
			#include <stdlib.h>

			int main() {
			
			    return 0;
			}
			EOF
		;;

		html)
			cat <<-EOF
			<!DOCTYPE html>
			<html lang="en">
			  <head>
		        <meta charset="UTF-8">
		        <meta name="viewport" content="width=device-width, initial-scale=1.0">
		        <meta http-equiv="X-UA-Compatible" content="ie=edge">
		        <title>HTML 5 Boilerplate</title>
		        <link rel="stylesheet" href="style.css">
			  </head>
			  <body>
			       <script src="index.js"></script>
			  </body>
			</html>
			EOF
		;;

		jsx)
			local basename="${filename##*/}"
			cat <<-EOF
			import React from 'react';

			function ${basename%.*}() {
			  return (
			    <>
			    </>
			);
			}

			export default ${basename%.*};
			EOF
		;;

		*) printf "#!/usr/bin/env %s\n" "$ext" ;;
	esac
}

create_file() {
	if [[ -f "$filename" && -z "$force" ]]; then
		read -erp "gen: overwrite '${filename}'? " overwrite
		[[ ! "${overwrite,,}" =~ ^y(es)?$ ]] && exit 0
	fi
	if [[ -f "$filename" ]]; then
		chmod "${custom_mode:-${mode:-u+rw}}" "$filename" || exit 126
		(: > "$filename") &> /dev/null || {
			printf "gen: %s: Permission denied\n" "$filename" >&2; exit 126; }
	else
		(: > "$filename") &> /dev/null || {
			printf "gen: %s: Permission denied\n" "$filename" >&2; exit 126; }
		chmod "${custom_mode:-${mode:-u+rw}}" "$filename" || { rm -f "$filename"; exit 126; }
	fi
}

check_ext() {
	case "${ext:-}" in
		awk) mode="u+rwx" ;;
		c) format="c" ;;
		jsx) format="jsx" ;;
		html|htm) format="html" ;;
		js) mode="u+rwx"; ext="node" ;;
		pl) mode="u+rwx"; ext="perl" ;;
		py) mode="u+rwx"; format="py" ;;
		sh|bash) mode="u+rwx"; ext="bash" ;;
		*sh) mode="u+rwx" ;;
		*) quiet=true ;;
	esac
}

get_template() {
	[[ -f "${HOME}/.gen/templates/template.${ext}" ]] && {
		custom_template="$(< "${HOME}/.gen/templates/template.${ext}")" 
		format="custom_template"; }
}

get_args() {
	while getopts ':hxqfdsc:ve:' option; do
		case "$option" in
			h) usage ;;
			q) quiet=true ;;
			f) force=true ;;
			d) default=true ;;
			s) suppress=true ;;
			c) custom_mode="$OPTARG" ;;
			v) printf "%s\n" "$version"; exit 0 ;;
			e)
				command -v "$OPTARG" &> /dev/null || {
					printf "gen: %s: not found\n" "$OPTARG" >&2
					printf "Try 'gen -h' for more information.\n" >&2; exit 127; }
				editor="$OPTARG"
			;;

			?)
				printf "gen: invalid option -- '%s'\n" "$OPTARG" >&2
				printf "Try 'gen -h' for more information.\n" >&2; exit 2
			;;
		esac
	done
	shift "$(( OPTIND -1 ))"
	[[ -z "${1:-}" ]] && {
		printf "gen: Must provide filename.\n" >&2
		printf "Try 'gen -h' for more information.\n" >&2; exit 2; }
	[[ -d "$1" ]] && { printf "gen: cannot generate '%s': Is a directory\n" "$1" >&2; exit 2; }
	filename="$1"
}

main() {
	get_args "$@"
	[[ "$filename" == *.* ]] && ext="${filename##*.}"
	[[ -z "${default:-}" && -n "${ext:-}" ]] && get_template
	[[ -z "${custom_template:-}" ]] && check_ext
	create_file
	[[ -z "${quiet:-}" ]] && gen_template > "$filename"
	[[ -z "${suppress:-}" && -z "${editor:-}" ]] && which_ed
	[[ -z "${suppress:-}" ]] && "$editor" "$filename"
	return 0
}

main "$@"
