#!/usr/bin/env bash

# Generate: A command-line script file generation tool written in bash 3.2+.
# https://github.com/zpiatt/gen
#
# Copyright (C) 2022 Zac Piatt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

version="Generate (gen) version: 1.6.4 - June 7, 2023"

gen_templates() {
	cat <<-EOF
	${template}
	EOF
}

gen_py() {
	cat <<-EOF
	#!/usr/bin/env python
	def main():

	if __name__ == '__main__':
	    main()
	EOF
}

gen_c() {
	cat <<-EOF
	#include <stdio.h>
	#include <stdlib.h>

	int main() {

	    return 0;
	}
	EOF
}

gen_sh() {
	cat <<-EOF
	#!/usr/bin/env ${ext}

	EOF
}

gen_html() {
	cat <<-EOF
	<!DOCTYPE html>
	<html lang="en">
	  <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>HTML 5 Boilerplate</title>
        <link rel="stylesheet" href="style.css">
	  </head>
	  <body>
	       <script src="index.js"></script>
	  </body>
	</html>
	EOF
}

gen_jsx() {
	local basename="${filename##*/}"
	cat <<-EOF
	import React from 'react';

	function ${basename%.*}() {
	  return (
	    <>
	    </>
	);
	}

	export default ${basename%.*};
	EOF
}

usage() {
	cat <<-EOF
	Usage: gen [OPTION]... [FILE]...
	Generate FILE, input script template, and launch default editor.

	  -x,   add execute to user permissions regardless of default
	  -c,   customize file permissions ( gen -c 754 example.sh )
	  -q,   quiet automatic input of script template
	  -f,	overwrite existing file contents, never prompt
	  -s,   suppress launch of editor
	  -e,   manually select editor ( gen -e nano example.py )
	  -d,   use default template despite available custom template
	  -v,   display version number and exit
	  -h,   display help and exit

	Full documentation <https://github.com/zpiatt/gen>
	EOF
	exit 0
}

which_ed() {
	if which "${VISUAL:-}" &> /dev/null; then
		editor="$VISUAL"
	elif which "${EDITOR:-}" &> /dev/null; then
		editor="$EDITOR"
	else
		local editors=( nano vi ed )
		for ed in "${editors[@]}"; do
			editor="$(which "$ed" &> /dev/null)" && return
		done
	fi
}

create_file() {
	if [[ -e "$filename" && -z "$force" ]]; then
		read -erp "gen: overwrite '${filename}'? " overwrite
		if [[ ${overwrite,,} == "y" ]]; then
			if ! touch "$filename"; then exit 1; fi
		else
			exit 0
		fi
	else
		if ! touch "$filename"; then exit 1; fi
	fi
}

check_ext() {
	case "${ext:-}" in
		awk) mode="u+x" ;;
		c) format="c" ;;
		jsx) format="jsx" ;;
		html|htm) format="html" ;;
		js) mode="u+x"; ext="node" ;;
		pl) mode="u+x"; ext="perl" ;;
		py) mode="u+x"; format="py" ;;
		sh|bash) mode="u+x"; ext="bash" ;;
		*sh) mode="u+x" ;;
		*)
			if [[ -n "${template:-}" ]]; then
				format="templates"
			else
				quiet=true
			fi
		;;
	esac
}

get_template() {
	[[ -f "$HOME/.gen/templates/template.$ext" ]] && \
		template="$(< "$HOME/.gen/templates/template.$ext")"
}

get_args() {
	while getopts ':hxqfdsc:ve:' option; do
		case "$option" in
			h) usage ;;
			x) mode="u+x" ;;
			q) quiet=true ;;
			f) force=true ;;
			d) default=true ;;
			s) suppress=true ;;
			c) mode="$OPTARG" ;;
			v) printf "%s\n" "$version"; exit 0 ;;
			e)
				if which "$OPTARG" > /dev/null; then
					editor="$OPTARG"
				else
					exit 1
				fi
			;;

			?)
				printf "gen: invalid option -- '%s'\n" "$OPTARG"
				printf "Try 'gen -h' for more information.\n"; exit 1
			;;
		esac
	done
	shift "$((OPTIND -1))"
	if [[ -n "${1:-}" ]]; then
		filename="$1"
	else
		printf "gen: Must provide filename.\n"
		printf "Try 'gen -h' for more information.\n"; exit 1
	fi
}

main() {
	get_args "$@"
	[[ "$filename" == *.* ]] && ext="${filename##*.}"
	[[ -z "${default:-}" && -n "${ext:-}" ]] && get_template
	check_ext
	create_file
	[[ -n "${mode:-}" ]] && chmod "$mode" "$filename"
	[[ -z "${quiet:-}" ]] && gen_"${format:-sh}" > "$filename"
	[[ -z "${suppress:-}" && -z "${editor:-}" ]] && which_ed
	[[ -z "${suppress:-}" ]] && "$editor" "$filename"
}

main "$@"
